pipeline {
    agent any
    stages {
        stage("Set Variable") {
            steps {
                script {
                    IMAGE_NAME_FE = "lingotown_front_image"
                    CONTAINER_NAME_FE = "LingoTown_Front_Dev"
                    APPLICATION_ENV_PATH = "/usr/react"
                    PROJECT_DIR_FE = "Front"
                }
            }
        }

        // 설정파일 참조
        stage("Copy Setting File") {
            steps {
                sh "cp ${APPLICATION_ENV_PATH}/.env ${PROJECT_DIR_FE}"
            }
        }

        // 컨테이너 클리닝
        stage("Docker Container Cleaning") {
            steps{
                sh "docker ps -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker container stop"    
                sh "docker container ls -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker rm"
            }
        }

        // 이미지 클리닝
        stage("Docker Image Cleaning") {
            steps{
                script {
                    // 'latest-success' 이미지 ID를 가져옵니다. 만약 없다면 빈 문자열이 반환됩니다.
                    LATEST_SUCCESS_IMAGE_ID = sh(script: "docker images ${IMAGE_NAME_FE}:latest-success -q", returnStdout: true).trim()

                    // 가져온 'latest-success' 이미지 ID를 로깅합니다.
                    echo "Latest successful image ID: '${LATEST_SUCCESS_IMAGE_ID}'"

                    if (LATEST_SUCCESS_IMAGE_ID != '') {
                        // 'latest-success' 태그가 없는 이미지만 삭제합니다.
                        echo "Deleting images..."
                        sh "docker images ${IMAGE_NAME_FE} -q | grep -v ${LATEST_SUCCESS_IMAGE_ID} | xargs docker rmi -f"
                    } else {
                        echo "No images found for deletion. Skipping..."
                    }
                }
            }
        }
        
        // 도커 이미지 빌드
        stage("Docker Image Build") {
            steps {
                dir("${PROJECT_DIR_FE}") {
                    script {
                        sh "docker build --no-cache -t ${IMAGE_NAME_FE}:latest ."

                        // 기존 latest-success 태그 삭제
                        sh "docker rmi ${IMAGE_NAME_FE}:latest-success || true"

                        // 빌드 성공 시, 이미지에 latest-success 태그 추가
                        sh "docker tag ${IMAGE_NAME_FE}:latest ${IMAGE_NAME_FE}:latest-success"
                    }
                }
            }
        }

        // 컨테이너 실행
        stage("Docker Container Run") {
            steps {
                script {
                    sh "docker run -d -p 3001:3000 --name ${CONTAINER_NAME_FE} ${IMAGE_NAME_FE}:latest-success"
                }
            }
        }
    }

    post {
        failure {
            script {
                // 실패한 경우, 이전에 성공한 이미지로 롤백합니다.
                echo 'The build has failed. Initiating rollback...'

                // 현재 실행 중이거나 멈춰있는 컨테이너를 정지하고 제거합니다.
                sh "docker ps -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker stop"
                sh "docker ps -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker rm"

                // 'latest-success' 이미지의 존재 여부를 확인합니다.
                LATEST_SUCCESS_IMAGE_ID = sh(script: "docker images ${IMAGE_NAME_FE}:latest-success -q", returnStdout: true).trim()
                if (LATEST_SUCCESS_IMAGE_ID) {
                    echo "Rolling back to the latest successful image."

                    // 이전에 성공한 이미지로 새 컨테이너를 시작하지만, 컨테이너 이름은 동일하게 유지합니다.
                    sh "docker run -d -p 3001:3000 --name ${CONTAINER_NAME_FE} ${IMAGE_NAME_FE}:latest-success"
                } else {
                    echo "No available image for rollback. Please check the previous successful build and its image."
                }
            }
        }
    }
}