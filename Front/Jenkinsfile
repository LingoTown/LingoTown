pipeline {
    agent any

    tools {
        nodejs "LingoTownNodeJS"
    }

    stages {
        stage("Set Variable") {
            steps {
                script {
                    IMAGE_NAME_FE = "lingotown_front_image"
                    CONTAINER_NAME_FE = "LingoTown_Front_Prod"
                    APPLICATION_ENV_PATH = "/usr/react"
                    PROJECT_DIR_FE = "Front"
                }
            }
        }

        // 설정파일 참조
        stage("Copy Setting File") {
            steps {
                sh "cp ${APPLICATION_ENV_PATH}/.env ${PROJECT_DIR_FE}"
                // sh "cp ${APPLICATION_ENV_PATH}/sonar-project.properties ${PROJECT_DIR_FE}"
            }
        }

        // Jest
        // stage('Run Jest') {
        //     steps {
        //         dir("${PROJECT_DIR_FE}") {
        //             sh 'npm install'
        //             sh 'npm test -- --coverage' // Jest 테스트 실행
        //         }
        //     }
        // }

        // SonarQube 분석
        // stage('SonarQube Analysis') {  
        //     steps {
        //         script {
        //             def scannerHome = tool 'SonarQubeScanner'

        //             withSonarQubeEnv('SonarQube') {
        //                 dir("${PROJECT_DIR_FE}") {
        //                     sh "${scannerHome}/bin/sonar-scanner"
        //                 }
        //             }
        //         }
        //     }
        // }

        // 컨테이너 클리닝
        stage("Docker Container Cleaning") {
            steps{
                sh "docker ps -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker container stop"    
                sh "docker container ls -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker rm"
            }
        }

        // 이미지 클리닝
        stage("Docker Image Cleaning") {
            steps{
                script {
                    // latest 태그의 이미지를 삭제한다. 
                    // latest-success 태그의 이미지는 삭제하지 않는다
                    // 이후 새 이미지 성공 / 실패에 따라 기존 latest-success 이미지의 삭제 여부를 다르게 하기 위해
                    sh "docker rmi -f ${IMAGE_NAME_FE}:latest | true"
                }
            }
        }
        
        // 도커 이미지 빌드
        stage("Docker Image Build") {
            steps {
                dir("${PROJECT_DIR_FE}") {
                    script {
                        // 현재 이미지 빌드
                        sh "docker build --no-cache -t ${IMAGE_NAME_FE}:latest ."

                        // 빌드 성공 시 기존 latest-success 태그 삭제
                        sh "docker rmi ${IMAGE_NAME_FE}:latest-success || true"

                        // 빌드 성공 시, 이미지에 latest-success 태그 추가
                        sh "docker tag ${IMAGE_NAME_FE}:latest ${IMAGE_NAME_FE}:latest-success"

                        // 만약 빌드 실패 시, 기존 latest-success 태그는 삭제하지 않는다.
                    }
                }
            }
        }

        // 컨테이너 실행
        stage("Docker Container Run") {
            steps {
                script {
                    // 이전 스테이지에서 빌드 성공 했을 때로 새로 등록한 latest-success 태그의 이미지 사용
                    sh "docker run -d -p 3001:3000 --name ${CONTAINER_NAME_FE} ${IMAGE_NAME_FE}:latest-success"
                }
            }
        }
    }

    post {
        failure {
            script {
                // 현재 실행 중이거나 멈춰있는 컨테이너를 정지하고 제거합니다.
                sh "docker ps -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker stop"
                sh "docker ps -a -q -f name=${CONTAINER_NAME_FE} | xargs --no-run-if-empty docker rm"

                // 'latest-success' 이미지의 존재 여부를 확인합니다.
                LATEST_SUCCESS_IMAGE_ID = sh(script: "docker images ${IMAGE_NAME_FE}:latest-success -q", returnStdout: true).trim()
                
                // RollBack 성공 - 이전에 성공한 이미지로 새 컨테이너를 시작하지만, 컨테이너 이름은 동일하게 유지합니다.
                if (LATEST_SUCCESS_IMAGE_ID) 
                    sh "docker run -d -p 3001:3000 --name ${CONTAINER_NAME_FE} ${IMAGE_NAME_FE}:latest-success"

                // RollBack 실패
                else 
                    echo "RollBack Fail. No available image for rollback. Please check the previous successful build and its image."
            }
        }
    }
}